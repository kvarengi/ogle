package com.ogle.demiurge

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import kotlin.math.*

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–∏—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è —Å–±–æ—Ä–∞ –Ω—É—Ç–∞—Ü–∏–∏ –∫—Ä–µ—Å—Ç—Ü–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
 * –î–µ–º–∏—É—Ä–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±—ã—á–∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏!
 */
class GyroscopeManager(private val context: Context) : SensorEventListener {
    
    private var sensorManager: SensorManager? = null
    private var gyroscope: Sensor? = null
    private var accelerometer: Sensor? = null
    
    // –î–∞–Ω–Ω—ã–µ –Ω—É—Ç–∞—Ü–∏–∏
    private var nutationLongitude: Float = 0f
    private var nutationObliquity: Float = 0f
    private var isCalibrated: Boolean = false
    
    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    private var baseRotationX: Float = 0f
    private var baseRotationY: Float = 0f
    private var baseRotationZ: Float = 0f
    
    // –¢–µ–∫—É—â–∏–µ —É–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞
    private var currentRotationX: Float = 0f
    private var currentRotationY: Float = 0f
    private var currentRotationZ: Float = 0f
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ arcsec
    private val RAD_TO_ARCSEC = 206264.806f
    
    // –ö–æ–ª–±—ç–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω—É—Ç–∞—Ü–∏–∏
    var onNutationChanged: ((longitude: Float, obliquity: Float) -> Unit)? = null
    
    init {
        initializeSensors()
    }
    
    private fun initializeSensors() {
        sensorManager = context.getSystemService(Context.SENSOR_SERVICE) as SensorManager
        gyroscope = sensorManager?.getDefaultSensor(Sensor.TYPE_GYROSCOPE)
        accelerometer = sensorManager?.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)
    }
    
    fun startMeasuring() {
        gyroscope?.let { sensor ->
            sensorManager?.registerListener(this, sensor, SensorManager.SENSOR_DELAY_UI)
        }
        accelerometer?.let { sensor ->
            sensorManager?.registerListener(this, sensor, SensorManager.SENSOR_DELAY_UI)
        }
    }
    
    fun stopMeasuring() {
        sensorManager?.unregisterListener(this)
    }
    
    fun calibrate() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –±–∞–∑–æ–≤—ã–µ
        baseRotationX = currentRotationX
        baseRotationY = currentRotationY  
        baseRotationZ = currentRotationZ
        isCalibrated = true
    }
    
    override fun onSensorChanged(event: SensorEvent?) {
        event?.let {
            when (it.sensor.type) {
                Sensor.TYPE_GYROSCOPE -> {
                    handleGyroscopeData(it.values)
                }
                Sensor.TYPE_ACCELEROMETER -> {
                    handleAccelerometerData(it.values)
                }
            }
        }
    }
    
    private fun handleGyroscopeData(values: FloatArray) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —É–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞
        currentRotationX += values[0] * 0.1f // X-–æ—Å—å (–∫—Ä–µ–Ω)
        currentRotationY += values[1] * 0.1f // Y-–æ—Å—å (—Ç–∞–Ω–≥–∞–∂) 
        currentRotationZ += values[2] * 0.1f // Z-–æ—Å—å (—Ä—ã—Å–∫–∞–Ω–∏–µ)
        
        if (isCalibrated) {
            calculateNutation()
        }
    }
    
    private fun handleAccelerometerData(values: FloatArray) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        // –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    }
    
    private fun calculateNutation() {
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω—É—Ç–∞—Ü–∏—é –∫—Ä–µ—Å—Ç—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        val deltaX = currentRotationX - baseRotationX
        val deltaY = currentRotationY - baseRotationY
        val deltaZ = currentRotationZ - baseRotationZ
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω—É—Ç–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ –∑–µ–º–Ω–æ–π –Ω—É—Ç–∞—Ü–∏–∏)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å, –ø–æ—Ö–æ–∂—É—é –Ω–∞ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –Ω—É—Ç–∞—Ü–∏—é
        nutationLongitude = (deltaZ * cos(deltaX.toDouble()) + deltaY * sin(deltaX.toDouble())).toFloat() * RAD_TO_ARCSEC
        nutationObliquity = (deltaY * cos(deltaX.toDouble()) - deltaZ * sin(deltaX.toDouble())).toFloat() * RAD_TO_ARCSEC
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ (-20 –¥–æ +20 arcsec)
        nutationLongitude = nutationLongitude.coerceIn(-20f, 20f)
        nutationObliquity = nutationObliquity.coerceIn(-20f, 20f)
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        onNutationChanged?.invoke(nutationLongitude, nutationObliquity)
    }
    
    fun getNutationData(): Pair<Float, Float> {
        return Pair(nutationLongitude, nutationObliquity)
    }
    
    fun isGyroscopeAvailable(): Boolean {
        return gyroscope != null
    }
    
    fun isAccelerometerAvailable(): Boolean {
        return accelerometer != null
    }
    
    fun getDeviceStatus(): String {
        val gyroStatus = if (isGyroscopeAvailable()) "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        val accelStatus = if (isAccelerometerAvailable()) "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" 
        val calibStatus = if (isCalibrated) "‚úÖ –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω" else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞"
        
        return """
            üì± –°–¢–ê–¢–£–° –£–°–¢–†–û–ô–°–¢–í–ê:
            –ì–∏—Ä–æ—Å–∫–æ–ø: $gyroStatus
            –ê–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä: $accelStatus
            –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: $calibStatus
            
            üåê –¢–ï–ö–£–©–ê–Ø –ù–£–¢–ê–¶–ò–Ø –ö–†–ï–°–¢–¶–ê:
            –î–æ–ª–≥–æ—Ç–∞: ${String.format("%.3f", nutationLongitude)}''
            –ù–∞–∫–ª–æ–Ω: ${String.format("%.3f", nutationObliquity)}''
        """.trimIndent()
    }
    
    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤
    }
}
