package com.ogle.demiurge

import android.os.Bundle
import android.view.KeyEvent
import android.widget.EditText
import android.widget.ScrollView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import android.graphics.Typeface
import android.text.method.ScrollingMovementMethod
import android.view.inputmethod.EditorInfo

class MainActivity : AppCompatActivity() {
    
    private lateinit var terminalOutput: TextView
    private lateinit var commandInput: EditText
    private lateinit var scrollView: ScrollView
    private lateinit var terminalInterface: TerminalInterface
    
    private val terminalHistory = mutableListOf<String>()
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        setupTerminalUI()
        initializeTerminal()
    }
    
    private fun setupTerminalUI() {
        // –°–æ–∑–¥–∞—ë–º UI –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        val layout = android.widget.LinearLayout(this).apply {
            orientation = android.widget.LinearLayout.VERTICAL
            setPadding(16, 16, 16, 16)
            setBackgroundColor(android.graphics.Color.BLACK)
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        val title = TextView(this).apply {
            text = "üåü OGLE Demiurge Terminal üåü"
            textSize = 18f
            setTextColor(android.graphics.Color.CYAN)
            typeface = Typeface.MONOSPACE
            gravity = android.view.Gravity.CENTER
            setPadding(0, 0, 0, 16)
        }
        
        // –°–∫—Ä–æ–ª–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        scrollView = ScrollView(this).apply {
            layoutParams = android.widget.LinearLayout.LayoutParams(
                android.widget.LinearLayout.LayoutParams.MATCH_PARENT,
                0,
                1f
            )
        }
        
        // –í—ã–≤–æ–¥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        terminalOutput = TextView(this).apply {
            textSize = 12f
            setTextColor(android.graphics.Color.GREEN)
            typeface = Typeface.MONOSPACE
            movementMethod = ScrollingMovementMethod()
            setPadding(8, 8, 8, 8)
            text = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–∏—É—Ä–≥–∞...\n"
        }
        
        scrollView.addView(terminalOutput)
        
        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        commandInput = EditText(this).apply {
            hint = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
            textSize = 14f
            setTextColor(android.graphics.Color.WHITE)
            setHintTextColor(android.graphics.Color.GRAY)
            typeface = Typeface.MONOSPACE
            setBackgroundColor(android.graphics.Color.rgb(32, 32, 32))
            setPadding(8, 8, 8, 8)
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
            setOnEditorActionListener { _, actionId, _ ->
                if (actionId == EditorInfo.IME_ACTION_DONE) {
                    executeCommand()
                    true
                } else false
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Enter
            setOnKeyListener { _, keyCode, event ->
                if (keyCode == KeyEvent.KEYCODE_ENTER && event.action == KeyEvent.ACTION_DOWN) {
                    executeCommand()
                    true
                } else false
            }
        }
        
        layout.addView(title)
        layout.addView(scrollView)
        layout.addView(commandInput)
        
        setContentView(layout)
    }
    
    private fun initializeTerminal() {
        terminalInterface = TerminalInterface(this)
        
        val initMessage = terminalInterface.initialize()
        appendToTerminal(initMessage)
        appendToTerminal("\n> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
    }
    
    private fun executeCommand() {
        val command = commandInput.text.toString().trim()
        if (command.isNotEmpty()) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            terminalHistory.add(command)
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            appendToTerminal("\nüíª > $command")
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            val result = terminalInterface.processCommand(command)
            appendToTerminal("\n$result")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
            if (command.lowercase() in listOf("exit", "–≤—ã—Ö–æ–¥")) {
                finish()
                return
            }
            
            appendToTerminal("\n> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            commandInput.setText("")
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            scrollToBottom()
        }
    }
    
    private fun appendToTerminal(text: String) {
        runOnUiThread {
            terminalOutput.append(text)
            scrollToBottom()
        }
    }
    
    private fun scrollToBottom() {
        scrollView.post {
            scrollView.fullScroll(ScrollView.FOCUS_DOWN)
        }
    }
    
    override fun onResume() {
        super.onResume()
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        commandInput.requestFocus()
    }
    
    override fun onDestroy() {
        super.onDestroy()
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–∏—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        terminalInterface.processCommand("gyro stop")
    }
}
