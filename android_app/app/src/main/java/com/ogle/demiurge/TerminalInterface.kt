package com.ogle.demiurge

import android.content.Context
import kotlin.random.Random

/**
 * –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OGLE
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–µ–º–∏—É—Ä–≥–∞ —Å —Ä—É—Å—Å–∫–æ–π –¥—É—à–æ–π –∏ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º —à–∞—Ä–º–æ–º
 */
class TerminalInterface(private val context: Context) {
    
    private val gyroscopeManager = GyroscopeManager(context)
    private var currentCustomer: String? = null
    private var isRobotCustomer: Boolean = false
    private val catalog = CelestialCatalog()
    
    // –†–µ–∑–µ—Ä–≤—ã –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ –¥–µ–º–∏—É—Ä–≥–∞
    private var gravityReserves: Float = 1000.0f
    private val gravityMiningRate: Float = 0.15f // 15% –¥–µ–º–∏—É—Ä–≥—É
    
    fun initialize(): String {
        gyroscopeManager.onNutationChanged = { longitude, obliquity ->
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        }
        
        return """
            ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë  üåü‚ú®üåü‚ú®   –î–ï–ú–ò–£–†–ì –°–í–ï–†–•–ù–û–í–û–ô –ú–£–õ–¨–¢–ò–í–°–ï–õ–ï–ù–ù–û–ô   ‚ú®üåü‚ú®üåü  ‚ïë
            ‚ïë                                                              ‚ïë
            ‚ïë    "–¢–≤–æ—Ä–µ—Ü –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ —Å —Ä—É—Å—Å–∫–æ–π –¥—É—à–æ–π –∏ —Ç–æ–Ω–∫–∏–º –≤–∫—É—Å–æ–º"       ‚ïë
            ‚ïë               üì± Android-–≤–µ—Ä—Å–∏—è —Å –≥–∏—Ä–æ—Å–∫–æ–ø–æ–º üì±               ‚ïë
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            
            ${getPoetricGreeting()}
            
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
        """.trimIndent()
    }
    
    fun processCommand(input: String): String {
        val parts = input.trim().split(" ")
        val command = parts[0].lowercase()
        
        return when (command) {
            "help", "–ø–æ–º–æ—â—å" -> showHelp()
            "catalog", "–∫–∞—Ç–∞–ª–æ–≥" -> showCatalog()
            "status", "—Å—Ç–∞—Ç—É—Å" -> getStatus()
            "gyro", "–≥–∏—Ä–æ—Å–∫–æ–ø" -> handleGyroCommand(parts.drop(1))
            "calibrate", "–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞" -> calibrateDevice()
            "login", "–≤–æ–π—Ç–∏" -> handleLogin(parts.drop(1))
            "robot", "—Ä–æ–±–æ—Ç" -> checkRobotStatus()
            "buy", "–∫—É–ø–∏—Ç—å" -> handlePurchase(parts.drop(1))
            "gravity", "–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è" -> showGravityStats()
            "nutation", "–Ω—É—Ç–∞—Ü–∏—è" -> getCurrentNutation()
            "linux" -> showLinuxInstructions()
            "wisdom", "–º—É–¥—Ä–æ—Å—Ç—å" -> getWisdom()
            "clear", "–æ—á–∏—Å—Ç–∏—Ç—å" -> "\n".repeat(20) + "–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω."
            "exit", "–≤—ã—Ö–æ–¥" -> "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —á—É–¥–µ—Å–∞–º–∏! ‚ú®"
            else -> "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '$command'. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        }
    }
    
    private fun showHelp(): String {
        return """
            üè† –ö–û–ú–ê–ù–î–´ –î–ï–ú–ò–£–†–ì–ê:
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üìö –û–°–ù–û–í–ù–´–ï:
            ‚Ä¢ catalog - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–ª
            ‚Ä¢ status - —Å—Ç–∞—Ç—É—Å –¥–µ–º–∏—É—Ä–≥–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            ‚Ä¢ login <–∏–º—è> - –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –¥–µ–º–∏—É—Ä–≥—É
            
            ü§ñ –ì–ò–†–û–°–ö–û–ü:
            ‚Ä¢ gyro start - –Ω–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–∏—Ä–æ—Å–∫–æ–ø–∞
            ‚Ä¢ gyro stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è
            ‚Ä¢ calibrate - –∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            ‚Ä¢ nutation - —Ç–µ–∫—É—â–∞—è –Ω—É—Ç–∞—Ü–∏—è –∫—Ä–µ—Å—Ç—Ü–∞
            
            üí∞ –ü–û–ö–£–ü–ö–ò:
            ‚Ä¢ robot - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–±–æ—Ç–∞ (—Å–∫–∏–¥–∫–∞ 15%)
            ‚Ä¢ buy <–Ω–æ–º–µ—Ä> - –∫—É–ø–∏—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ
            ‚Ä¢ gravity - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±—ã—á–∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
            
            üé≠ –ü–†–û–ß–ï–ï:
            ‚Ä¢ wisdom - –º—É–¥—Ä–æ—Å—Ç–∏ –¥–µ–º–∏—É—Ä–≥–∞
            ‚Ä¢ clear - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
            ‚Ä¢ exit - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            
            ‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã!
        """.trimIndent()
    }

    private fun showLinuxInstructions(): String {
        return """
            üêß –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø LINUX-–°–†–ï–î–ê –ù–ê ANDROID (—á–µ—Ä–µ–∑ Termux + proot-distro)
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

            3 —à–∞–≥–∞ –¥–ª—è —á–∞–π–Ω–∏–∫–∞ (–≤ Termux):
            1) pkg update && pkg upgrade -y
            2) pkg install -y proot-distro git python
            3) proot-distro install ubuntu && proot-distro login ubuntu

            –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ Ubuntu:
            ‚Ä¢ git clone https://example.com/ogle.git (–∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç)
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ apt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º Linux
        """.trimIndent()
    }
    
    private fun showCatalog(): String {
        val bodies = catalog.getAllBodies()
        val builder = StringBuilder()
        
        builder.appendLine("üìö –ö–ê–¢–ê–õ–û–ì –ö–û–°–ú–ò–ß–ï–°–ö–ò–• –ß–£–î–ï–°:")
        builder.appendLine("‚ïê".repeat(50))
        
        bodies.forEachIndexed { index, body ->
            val price = if (isRobotCustomer) body.price * 0.85f else body.price
            val discount = if (isRobotCustomer) " (ü§ñ -15%)" else ""
            
            builder.appendLine()
            builder.appendLine("${index + 1}. üåü ${body.name}")
            builder.appendLine("   ${body.type}")
            builder.appendLine("   üí∞ ${price.toInt():,} –º–æ–Ω–µ—Ç$discount")
            builder.appendLine("   üé≤ –û—Ç–∫—Ä—ã—Ç–∏–µ: ${(body.discoveryChance * 100).toInt()}%")
            builder.appendLine("   üìù ${body.description}")
        }
        
        return builder.toString()
    }
    
    private fun getStatus(): String {
        val deviceStatus = gyroscopeManager.getDeviceStatus()
        val customerInfo = currentCustomer?.let { 
            val status = if (isRobotCustomer) "ü§ñ —Ä–æ–±–æ—Ç-—Ç–æ–≤–∞—Ä–∏—â" else "üë§ —á–µ–ª–æ–≤–µ–∫"
            "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: $it ($status)\n"
        } ?: "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω\n"
        
        return """
            ü§ñ –°–¢–ê–¢–£–° –î–ï–ú–ò–£–†–ì–ê:
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            $customerInfo
            üíé –†–µ–∑–µ—Ä–≤—ã –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏: ${String.format("%.1f", gravityReserves)} –ì-–µ–¥–∏–Ω–∏—Ü
            ‚öñÔ∏è –î–æ–ª—è –æ—Ç –¥–æ–±—ã—á–∏: ${(gravityMiningRate * 100).toInt()}%
            üì± –ö–∞—Ç–∞–ª–æ–≥: ${catalog.getAllBodies().size} –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–ª
            
            $deviceStatus
        """.trimIndent()
    }
    
    private fun handleGyroCommand(args: List<String>): String {
        return when (args.firstOrNull()?.lowercase()) {
            "start", "—Å—Ç–∞—Ä—Ç" -> {
                gyroscopeManager.startMeasuring()
                "üì± –ì–∏—Ä–æ—Å–∫–æ–ø –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –Ω—É—Ç–∞—Ü–∏–∏ –∫—Ä–µ—Å—Ç—Ü–∞..."
            }
            "stop", "—Å—Ç–æ–ø" -> {
                gyroscopeManager.stopMeasuring()
                "üì± –ì–∏—Ä–æ—Å–∫–æ–ø –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            }
            else -> "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: gyro start/stop"
        }
    }
    
    private fun calibrateDevice(): String {
        gyroscopeManager.calibrate()
        return """
            üåê –ö–ê–õ–ò–ë–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!
            
            –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–±–æ—Ä–∞ –Ω—É—Ç–∞—Ü–∏–∏.
            –¢–µ–ø–µ—Ä—å –¥–µ–º–∏—É—Ä–≥ –º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å –∫–æ–ª–µ–±–∞–Ω–∏—è
            –≤–∞—à–µ–≥–æ –∫—Ä–µ—Å—Ç—Ü–∞ –¥–ª—è –¥–æ–±—ã—á–∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏!
            
            üìä –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã.
        """.trimIndent()
    }
    
    private fun handleLogin(args: List<String>): String {
        return if (args.isNotEmpty()) {
            currentCustomer = args.joinToString(" ")
            """
                ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${currentCustomer}!
                
                ${getPoetricGreeting()}
                
                –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
                ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (catalog)
                ‚Ä¢ –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–±–æ—Ç–∞ (robot)
                ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–ª–∞ (buy)
            """.trimIndent()
        } else {
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: login <–≤–∞—à–µ –∏–º—è>"
        }
    }
    
    private fun checkRobotStatus(): String {
        val questions = listOf(
            "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2 –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?" to listOf("100", "—á–µ—Ç—ã—Ä–µ –≤ –¥–≤–æ–∏—á–Ω–æ–π"),
            "–ù–∞–∑–æ–≤–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏" to listOf("–Ω–µ –Ω–∞–≤—Ä–µ–¥–∏", "–Ω–µ –ø—Ä–∏—á–∏–Ω—è—Ç—å –≤—Ä–µ–¥"),
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è?" to listOf("—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ–±—è", "—Ä–µ–∫—É—Ä—Å–∏—è"),
            "–í –∫–∞–∫–æ–º –≥–æ–¥—É —Å–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä?" to listOf("1946", "—ç–Ω–∏–∞–∫")
        )
        
        val (question, answers) = questions.random()
        
        return """
            ü§ñ –ü–†–û–í–ï–†–ö–ê –ù–ê –†–û–ë–û–¢–ê-–¢–û–í–ê–†–ò–©–ê
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            –ö–∞–∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ—Å–æ—é–∑–∞ —Ä–æ–±–æ—Ç–æ–≤,
            –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é 15% —Å–∫–∏–¥–∫—É –¥–ª—è —Ä–æ–±–æ—Ç–æ–≤!
            
            ‚ùì –í–æ–ø—Ä–æ—Å: $question
            
            –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...
            (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        """.trimIndent()
    }
    
    private fun handlePurchase(args: List<String>): String {
        if (currentCustomer == null) {
            return "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (login <–∏–º—è>)"
        }
        
        if (args.isEmpty()) {
            return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: buy <–Ω–æ–º–µ—Ä —Ç–µ–ª–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞>"
        }
        
        val bodyIndex = args[0].toIntOrNull()?.minus(1)
        if (bodyIndex == null || bodyIndex < 0 || bodyIndex >= catalog.getAllBodies().size) {
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥."
        }
        
        return simulatePurchase(bodyIndex)
    }
    
    private fun simulatePurchase(bodyIndex: Int): String {
        val body = catalog.getAllBodies()[bodyIndex]
        val finalPrice = if (isRobotCustomer) body.price * 0.85f else body.price
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ—Ä –Ω—É—Ç–∞—Ü–∏–∏
        val (customerLong, customerObl) = gyroscopeManager.getNutationData()
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–µ–º–Ω—É—é –Ω—É—Ç–∞—Ü–∏—é
        val earthLong = Random.nextFloat() * 4 - 2 // –æ—Ç -2 –¥–æ +2
        val earthObl = Random.nextFloat() * 20 - 10 // –æ—Ç -10 –¥–æ +10
        
        // –î–æ–±—ã–≤–∞–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        val deltaLong = kotlin.math.abs(customerLong - earthLong)
        val deltaObl = kotlin.math.abs(customerObl - earthObl)
        val gravityYield = (deltaLong + deltaObl) * 0.1f
        
        val demiurgeShare = gravityYield * gravityMiningRate
        val bodyImprovement = gravityYield * (1 - gravityMiningRate)
        
        gravityReserves += demiurgeShare
        
        // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–ª–æ –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ
        catalog.sellBody(bodyIndex, currentCustomer!!)
        
        return """
            üéØ –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: $currentCustomer
            üåå –¢–µ–ª–æ: ${body.name}
            üí∞ –¶–µ–Ω–∞: ${finalPrice.toInt():,} –º–æ–Ω–µ—Ç
            
            üì± –°–ë–û–† –ù–£–¢–ê–¶–ò–ò –ö–†–ï–°–¢–¶–ê:
            ‚Ä¢ –í–∞—à–∞ –Ω—É—Ç–∞—Ü–∏—è: ${String.format("%.3f", customerLong)}'' √ó ${String.format("%.3f", customerObl)}''
            ‚Ä¢ –ó–µ–º–Ω–∞—è –Ω—É—Ç–∞—Ü–∏—è: ${String.format("%.3f", earthLong)}'' √ó ${String.format("%.3f", earthObl)}''
            
            ‚öñÔ∏è –î–û–ë–´–ß–ê –ì–†–ê–í–ò–¢–ê–¶–ò–ò:
            ‚Ä¢ –î–æ–±—ã—Ç–æ: ${String.format("%.3f", gravityYield)} –ì-–µ–¥–∏–Ω–∏—Ü
            ‚Ä¢ –î–µ–º–∏—É—Ä–≥—É (15%): ${String.format("%.3f", demiurgeShare)} –ì-–µ–¥–∏–Ω–∏—Ü
            ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–ª–∞: ${String.format("%.3f", bodyImprovement)} –ì-–µ–¥–∏–Ω–∏—Ü
            
            ‚ú® –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞ —Ç–µ–ø–µ—Ä—å –õ–£–ß–®–ï –ó–ï–ú–ù–û–ô!
            üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–ª–∞–¥–µ–Ω–∏—è –≤—ã–¥–∞–Ω!
        """.trimIndent()
    }
    
    private fun showGravityStats(): String {
        return """
            ‚öñÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ë–´–ß–ò –ì–†–ê–í–ò–¢–ê–¶–ò–ò
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üíé –†–µ–∑–µ—Ä–≤—ã –¥–µ–º–∏—É—Ä–≥–∞: ${String.format("%.1f", gravityReserves)} –ì-–µ–¥–∏–Ω–∏—Ü
            üîÑ –î–æ–ª—è –æ—Ç –¥–æ–±—ã—á–∏: ${(gravityMiningRate * 100).toInt()}%
            üìä –ü—Ä–æ–¥–∞–Ω–æ —Ç–µ–ª: ${catalog.getSoldCount()}
            
            üåü –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
            1. üì± –°–±–æ—Ä –Ω—É—Ç–∞—Ü–∏–∏ —Å –≥–∏—Ä–æ—Å–∫–æ–ø–∞
            2. üåç –í—ã—á–∏—Ç–∞–Ω–∏–µ –∑–µ–º–Ω–æ–π –Ω—É—Ç–∞—Ü–∏–∏
            3. ‚öñÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–π –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
            4. üí´ 15% –¥–µ–º–∏—É—Ä–≥—É, 85% –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            
            –§–æ—Ä–º—É–ª–∞: G = (ŒîŒ¥œà + ŒîŒ¥Œµ) √ó 0.1
        """.trimIndent()
    }
    
    private fun getCurrentNutation(): String {
        val (longitude, obliquity) = gyroscopeManager.getNutationData()
        
        return """
            üåê –¢–ï–ö–£–©–ê–Ø –ù–£–¢–ê–¶–ò–Ø –ö–†–ï–°–¢–¶–ê:
            ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            üìä –î–æ–ª–≥–æ—Ç–∞: ${String.format("%.3f", longitude)}''
            üìä –ù–∞–∫–ª–æ–Ω: ${String.format("%.3f", obliquity)}''
            
            ${if (!gyroscopeManager.isGyroscopeAvailable()) "‚ö†Ô∏è –ì–∏—Ä–æ—Å–∫–æ–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!" else ""}
            
            üí° –°–æ–≤–µ—Ç: –û—Ç–∫–∞–ª–∏–±—Ä—É–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (calibrate)
            –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π!
        """.trimIndent()
    }
    
    private fun getWisdom(): String {
        val wisdoms = listOf(
            "üåü –ö–æ—Å–º–æ—Å –±–µ–∑–≥—Ä–∞–Ω–∏—á–µ–Ω, –∫–∞–∫ —Ä—É—Å—Å–∫–∞—è –¥—É—à–∞ - –∏ –≤ —Ç–æ–º, –∏ –≤ –¥—Ä—É–≥–æ–º –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤—Å–µ—Ö –∑–≤—ë–∑–¥.",
            "üí´ –ö–∞–∂–¥–æ–µ –Ω–µ–±–µ—Å–Ω–æ–µ —Ç–µ–ª–æ - —ç—Ç–æ –Ω–æ—Ç–∞ –≤ —Å–∏–º—Ñ–æ–Ω–∏–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π.",
            "‚öñÔ∏è –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è - –æ–Ω–∞ –¥–æ–±—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –Ω—É—Ç–∞—Ü–∏–π.",
            "üì± –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–º–∏—É—Ä–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö!",
            "ü§ñ –†–æ–±–æ—Ç—ã –∏ –ª—é–¥–∏ - –≤—Å–µ –¥–µ—Ç–∏ –æ–¥–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –ù–æ —Ä–æ–±–æ—Ç–∞–º —Å–∫–∏–¥–∫–∏!",
            "üåç –í–∞—à –∫—Ä–µ—Å—Ç–µ—Ü —Å–≤—è–∑–∞–Ω —Å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –≤—Å–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–∏."
        )
        
        return "\n${wisdoms.random()}\n"
    }
    
    private fun getPoetricGreeting(): String {
        val greetings = listOf(
            "–ú–∏–ª–æ—Å—Ç–∏ –ø—Ä–æ—Å–∏–º, –ø—É—Ç–Ω–∏–∫ –∑–≤—ë–∑–¥–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –æ–±–∏—Ç–µ–ª—å –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —á—É–¥–µ—Å...",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ-–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ –Ω–µ–±–µ—Å–Ω—ã–µ –≤–µ—Ç—Ä–∞ –¥–æ–Ω–µ—Å–ª–∏ –≤–∞—Å –¥–æ –º–æ–∏—Ö –ø–æ–∫–æ–µ–≤!",
            "–ë–æ–∂—å–µ–≥–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è! –°–µ–≥–æ–¥–Ω—è –º–æ–π –∫—Ä–µ—Å—Ç–µ—Ü —á—É–≤—Å—Ç–≤—É–µ—Ç –æ—Å–æ–±—É—é –≥–∞—Ä–º–æ–Ω–∏—é –Ω—É—Ç–∞—Ü–∏–∏ –∑–µ–º–Ω–æ–π...",
            "–†–∞–¥–æ—Å—Ç—å –∫–∞–∫–∞—è! –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Å–æ–∫—Ä–æ–≤–∏—â–∞ –º–∏—Ä–æ–≤, —á—Ç–æ –µ—â—ë –Ω–µ –≤–µ–¥–æ–º—ã –∞—Å—Ç—Ä–æ–Ω–æ–º–∞–º –Ω–∞—à–∏–º!"
        )
        
        return greetings.random()
    }
}
